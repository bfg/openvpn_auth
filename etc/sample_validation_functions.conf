#
# WHAT: Sample validation functions file
#       for AuthStruct authenticatin module
#

# $Id$
# $LastChangedRevision$
# $LastChangedBy$
# $LastChangedDate$

# WARNING: DO NOT REMOVE THE FOLLOWING LINES:
use strict;
use warnings;

#
# GENERAL NOTES
#
# excerpt taken from configuration file of excellent opensource project
# called amavisd-new <http://www.ijs.si/software/amavisd/>
# by Mark Martinec <http://www.ijs.si/people/mark/>.
#
#  This file is a normal Perl code, interpreted by Perl itself.
#  - make sure this file (or directory where it resides) is NOT WRITABLE
#    by mere mortals, otherwise it represents a severe security risk!
#  - for values which are interpreted as booleans, it is recommended
#    to use 1 for true, and 0 or undef or '' for false.
#  - Perl syntax applies. Most notably: strings in "" may include variables
#    (which start with $ or @); to include characters @ and $ in double
#    quoted strings, precede them by a backslash; in single-quoted strings
#    the $ and @ lose their special meaning, so it is usually easier to use
#    single quoted strings. Still, in both cases backslash needs to be doubled.
#

#
# You can load your own modules
#
# use IO::File;
# use My::Own::Module;
#

# You can define your own global variables
#
# my $MY_GLOBAL_VARIABLE = "value";
#

# Sample validation function
#
# Function is called with two parameters:
#
# 	- 1. initialized Log::Log4perl object
#	- 2. authentication structure hash reference
#
# Function returns 1 if validation success, otherwise 0.
#
# !!! WARNING !!!
# DO NOT use print/printf to STDOUT/STDERR and DO NOT
# read from STDIN!
#
# Example authentication backend configuration:
#
# $auth_backends = {
# 	'struct_validator' => {
#		required => 1,
# 		driver => 'AuthStruct',
#
# 		username => \ &sample_authstruct_validator,
#
# 		# You can also define
# 		# validators for properties:
# 		# password, common_name, untrusted_ip, untrusted_port
#		#
# 		# password => \ &password_validator,
# 		# common_name => \ &cn_validator,
# 		# untrusted_ip => \ &ip_validator,
# 		# untrusted_port => \ &port_validator,
# 	}
# }
#
#
sub sample_authstruct_validator {
	# fetch Log::Log4perl logging object
	my $log = shift;
	
	#
	# Client's authentication structure now becomes
	# $_[0]...
	#
	# AUTHENTICATION STRUCTURE structure ;)
	#
	# This structure contains authentication data provided by
	# connected OpenVPN client
	#
	# $_[0] = {
	# 	# client's username
	# 	username => 'some_username',
	#
	#	# client's password
	# 	password => 'xyz',
	#
	#	# x509 certificate common name
	# 	common_name => 'some_username.vpn.example.org',
	#
	# 	# client's connecting ip address
	# 	untrusted_ip => '1.2.3.4',
	#
	#	# client's source port...
	# 	untrusted_port => 4376
	# };
	#

	#
	# we really hate user 'joe'.
	#
	if ($_[0]->{username} eq 'joe') {
		$log->error("We don't like Joe. Returning authentication failure.");
		
		# return authentication module failure
		return 0;
	}

	#
	# Hm, we'll rewrite user 'kaya' to 'pretty_c_minus'
	#
	# Author's note: this person in fact really does exists :)
	#
	elsif ($_[0]->{username} eq 'kaya') {
		$log->warn("Rewriting username 'kaya' to 'pretty_c_minus'.")
		$_[0]->{username} = 'pretty_c_minus';
	}
	
	# We want that certificate common name (CN) somehow
	# matches client's username...
	if ($_[0]->{common_name} =~ m/^([^\.]+)\.vpn\.example\.org$/i) {
		# if username doesn't match fail the authentication...
		if (lc($1) ne lc($_[0]->{username})) {
			$log->error("Client's username " . $_[0]->{username} . " doesn't match it's x509 certificate CN " . $_[0]->{common_name});
			return 0;
		} 
	} else {
		$log->error("Client's x509 certificate common name is not valid.");
		return 0;
	}
	
	# hm, we don't like that someone connects
	# with source port less than 5000
	#
	# (yeah, i know, this is silly, but it's just proof of
	# concept what you can really do here...)
	if ($_[0]->{untrusted_port} < 5000) {
		$log->error("We don't like clients which connect with source port < 5000.");
		return 0;
	}

	# return "authentication" success
	return 1;
}


# Do not remove the following line (it's required)
1;

# EOF